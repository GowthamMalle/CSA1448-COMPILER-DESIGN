#include <stdio.h>
#include <string.h>

void eliminate_left_recursion(char *non_terminal, char productions[][100], int n) {
    char alpha[10][100], beta[10][100];
    int alpha_count = 0, beta_count = 0;

    for (int i = 0; i < n; i++) {
        if (productions[i][0] == non_terminal[0]) {
            strcpy(alpha[alpha_count++], productions[i] + 1);
        } else {
            strcpy(beta[beta_count++], productions[i]);
        }
    }

    if (alpha_count == 0) {
        printf("No left recursion found in %s\n", non_terminal);
        return;
    }

    printf("%s -> ", non_terminal);
    for (int i = 0; i < beta_count; i++) {
        printf("%s%s'", beta[i], non_terminal);
        if (i < beta_count - 1) {
            printf(" | ");
        }
    }
    printf("\n");
    
    printf("%s' -> ", non_terminal);
    for (int i = 0; i < alpha_count; i++) {
        printf("%s%s'", alpha[i], non_terminal);
        if (i < alpha_count - 1) {
            printf(" | ");
        }
    }
    printf(" | Îµ\n");
}

int main() {
    char non_terminal;
    printf("Enter the non-terminal: ");
    scanf(" %c", &non_terminal);
    
    int n;
    printf("Enter number of productions: ");
    scanf("%d", &n);
    
    char productions[10][100];
    printf("Enter productions (format: A->Ab | b):\n");
    for (int i = 0; i < n; i++) {
        scanf("%s", productions[i]);
    }
    
    eliminate_left_recursion(&non_terminal, productions, n);
    
    return 0;
}
