#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100

typedef struct {
    char identifier[50];
    char type[20];
    int address;
} Symbol;

Symbol symbolTable[SIZE];
int symbolCount = 0;

void insertSymbol(char *identifier, char *type, int address) {
    strcpy(symbolTable[symbolCount].identifier, identifier);
    strcpy(symbolTable[symbolCount].type, type);
    symbolTable[symbolCount].address = address;
    symbolCount++;
}

void displaySymbolTable() {
    printf("\nSymbol Table:\n");
    printf("Identifier\tType\tAddress\n");
    for (int i = 0; i < symbolCount; i++) {
        printf("%s\t%s\t%d\n", symbolTable[i].identifier, symbolTable[i].type, symbolTable[i].address);
    }
}

int searchSymbol(char *identifier) {
    for (int i = 0; i < symbolCount; i++) {
        if (strcmp(symbolTable[i].identifier, identifier) == 0) {
            return i;
        }
    }
    return -1;
}

int main() {
    int choice;
    char identifier[50], type[20];
    int address;

    while (1) {
        printf("\n1. Insert Symbol\n2. Display Symbol Table\n3. Search Symbol\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter Identifier: ");
                scanf("%s", identifier);
                printf("Enter Type: ");
                scanf("%s", type);
                printf("Enter Address: ");
                scanf("%d", &address);
                insertSymbol(identifier, type, address);
                break;
            case 2:
                displaySymbolTable();
                break;
            case 3:
                printf("Enter Identifier to Search: ");
                scanf("%s", identifier);
                int index = searchSymbol(identifier);
                if (index != -1) {
                    printf("Symbol found at index %d\n", index);
                } else {
                    printf("Symbol not found.\n");
                }
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
